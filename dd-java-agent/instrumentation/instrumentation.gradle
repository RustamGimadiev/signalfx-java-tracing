// Modified by SignalFx
// this project will run in isolation under the agent's classloader
buildscript {
  dependencies {
    classpath "net.bytebuddy:byte-buddy-gradle-plugin:${versions.bytebuddy}"
  }
}
plugins {
  id "com.github.johnrengelman.shadow"
}
apply from: "${rootDir}/gradle/java.gradle"

Project instr_project = project
subprojects { subProj ->
  if (subProj.name != 'utils') {
    apply plugin: "net.bytebuddy.byte-buddy"
    apply plugin: 'muzzle'

    subProj.byteBuddy {
      transformation {
        // Applying NoOp optimizes build by applying bytebuddy plugin to only compileJava task
        tasks = ['compileJava', 'compileScala']
        plugin = 'datadog.trace.agent.tooling.muzzle.MuzzleGradlePlugin$NoOp'
      }
    }

    subProj.afterEvaluate {
      subProj.byteBuddy {
        transformation {
          tasks = ['compileJava', 'compileScala']
          plugin = 'datadog.trace.agent.tooling.muzzle.MuzzleGradlePlugin'
          classPath = project(':dd-java-agent:agent-tooling').configurations.instrumentationMuzzle + subProj.configurations.compile + subProj.sourceSets.main.output
        }
      }
    }

    subProj.tasks.withType(Test) {
      environment "JAEGER_SERVICE_NAME", "Java-Agent-Testing (${subProj.name})"
      environment "JAEGER_SAMPLER_TYPE", "const"
      environment "JAEGER_SAMPLER_PARAM", "1.0"
      environment "JAEGER_ENDPOINT", "https://ingest.signalfx.com/v1/trace"
      environment "JAEGER_USER", "auth"
      environment "JAEGER_REPORTER_FLUSH_INTERVAL", "1000"
      systemProperties["mock.tracer.composite"] = "1"
    }
  }

  instr_project.dependencies {
    compile(project(subProj.getPath()))
  }
}

excludedClassesConverage += ['datadog.trace.instrumentation.*']

dependencies {
  compile(project(':dd-java-agent:agent-tooling')) {
    exclude module: ':dd-java-agent:agent-bootstrap'
  }
}

configurations {
  // exclude bootstrap dependencies from shadowJar
  runtime.exclude module: deps.opentracing
  runtime.exclude module: deps.slf4j
  runtime.exclude group: 'org.slf4j'
  runtime.exclude group: 'io.opentracing'
  runtime.exclude group: 'io.jaegertracing'
}

shadowJar {
  dependencies {
    exclude(project(':dd-java-agent:agent-bootstrap'))
    exclude(project(':dd-java-agent:agent-tooling'))
    exclude(project(':dd-trace-api'))
    exclude(dependency([group: 'io.opentracing', name: 'opentracing-api']))
    exclude(dependency([group: 'io.opentracing', name: 'opentracing-noop']))
    exclude(dependency([group: 'io.opentracing', name: 'opentracing-util']))
  }
}

jar {
  classifier = 'unbundled'
}
